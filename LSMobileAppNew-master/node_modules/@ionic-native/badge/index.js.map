{"version":3,"sources":["../../../src/@ionic-native/plugins/badge/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAAA,OAAO,EAAE,UAAA,EAAW,MAAO,eAAA,CAAgB;AAC3C,OAAO,EAAE,OAAA,EAAS,MAAA,EAAQ,iBAAA,EAAkB,MAAO,oBAAA,CAAqB;AAGxE;;;;;;;;;;;;;;;;;;;GAmBG;AASH;IAA2B,yBAAiB;IAA5C;;IA4DA,CAAC;IA1DC;;;OAGG;IAEH,qBAAK,GAAL,cAA4B,MAAM,CAAC,CAAC,CAAC;IAErC;;;;OAIG;IAEH,mBAAG,GAAH,UAAI,WAAmB,IAAkB,MAAM,CAAC,CAAC,CAAC;IAElD;;;OAGG;IAEH,mBAAG,GAAH,cAAsB,MAAM,CAAC,CAAC,CAAC;IAE/B;;;;OAIG;IAEH,wBAAQ,GAAR,UAAS,UAAkB,IAAkB,MAAM,CAAC,CAAC,CAAC;IAEtD;;;;OAIG;IAEH,wBAAQ,GAAR,UAAS,UAAkB,IAAkB,MAAM,CAAC,CAAC,CAAC;IAEtD;;;OAGG;IAEH,6BAAa,GAAb,cAAgC,MAAM,CAAC,CAAC,CAAC;IAEzC;;;OAGG;IAEH,kCAAkB,GAAlB,cAAqC,MAAM,CAAC,CAAC,CAAC;IAEzC,gBAAU,GAA0B;QAC3C,EAAE,IAAI,EAAE,UAAU,EAAE;KACnB,CAAC;IACF,kBAAkB;IACX,oBAAc,GAAmE,cAAM,OAAA,EAC7F,EAD6F,CAC7F,CAAC;IApDA;QADC,OAAO,EAAE;;;;sCAC2B;IAQrC;QADC,OAAO,EAAE;;;;oCACwC;IAOlD;QADC,OAAO,EAAE;;;;oCACqB;IAQ/B;QADC,OAAO,EAAE;;;;yCAC4C;IAQtD;QADC,OAAO,EAAE;;;;yCAC4C;IAOtD;QADC,OAAO,EAAE;;;;8CAC+B;IAOzC;QADC,OAAO,EAAE;;;;mDACoC;IApDnC,KAAK;QARjB,MAAM,CAAC;YACN,UAAU,EAAE,OAAO;YACnB,MAAM,EAAE,sBAAsB;YAC9B,SAAS,EAAE,oCAAoC;YAC/C,IAAI,EAAE,gDAAgD;YACtD,SAAS,EAAE,CAAC,SAAS,EAAE,SAAS,EAAE,KAAK,EAAE,SAAS,CAAC;SACpD,CAAC;OAEW,KAAK,CA4DjB;IAAD,YAAC;CA5DD,AA4DC,CA5D0B,iBAAiB,GA4D3C;SA5DY,KAAK","file":"index.js","sourceRoot":"","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Cordova, Plugin, IonicNativePlugin } from '@ionic-native/core';\r\n\r\n\r\n/**\r\n * @name Badge\r\n * @description\r\n * The essential purpose of badge numbers is to enable an application to inform its users that it has something for them — for example, unread messages — when the application isn’t running in the foreground.\r\n *\r\n * Requires Cordova plugin: cordova-plugin-badge. For more info, please see the [Badge plugin docs](https://github.com/katzer/cordova-plugin-badge).\r\n *\r\n * @usage\r\n * ```typescript\r\n * import { Badge } from '@ionic-native/badge';\r\n *\r\n * constructor(private badge: Badge) { }\r\n *\r\n * ...\r\n *\r\n * this.badge.set(10);\r\n * this.badge.increase(1);\r\n * this.badge.clear();\r\n * ```\r\n */\r\n@Plugin({\r\n  pluginName: 'Badge',\r\n  plugin: 'cordova-plugin-badge',\r\n  pluginRef: 'cordova.plugins.notification.badge',\r\n  repo: 'https://github.com/katzer/cordova-plugin-badge',\r\n  platforms: ['Android', 'Browser', 'iOS', 'Windows']\r\n})\r\n\r\nexport class Badge extends IonicNativePlugin {\r\n\r\n  /**\r\n   * Clear the badge of the app icon.\r\n   * @returns {Promise<boolean>}\r\n   */\r\n  @Cordova()\r\n  clear(): Promise<boolean> { return; }\r\n\r\n  /**\r\n   * Set the badge of the app icon.\r\n   * @param {number} badgeNumber  The new badge number.\r\n   * @returns {Promise<any>}\r\n   */\r\n  @Cordova()\r\n  set(badgeNumber: number): Promise<any> { return; }\r\n\r\n  /**\r\n   * Get the badge of the app icon.\r\n   * @returns {Promise<any>}\r\n   */\r\n  @Cordova()\r\n  get(): Promise<any> { return; }\r\n\r\n  /**\r\n   * Increase the badge number.\r\n   * @param {number} increaseBy  Count to add to the current badge number\r\n   * @returns {Promise<any>}\r\n   */\r\n  @Cordova()\r\n  increase(increaseBy: number): Promise<any> { return; }\r\n\r\n  /**\r\n   * Decrease the badge number.\r\n   * @param {number} decreaseBy  Count to subtract from the current badge number\r\n   * @returns {Promise<any>}\r\n   */\r\n  @Cordova()\r\n  decrease(decreaseBy: number): Promise<any> { return; }\r\n\r\n  /**\r\n   * Determine if the app has permission to show badges.\r\n   * @returns {Promise<any>}\r\n   */\r\n  @Cordova()\r\n  hasPermission(): Promise<any> { return; }\r\n\r\n  /**\r\n   * Register permission to set badge notifications\r\n   * @returns {Promise<any>}\r\n   */\r\n  @Cordova()\r\n  registerPermission(): Promise<any> { return; }\r\n\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}